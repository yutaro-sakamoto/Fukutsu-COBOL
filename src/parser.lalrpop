use crate::data::ast::*;
use std::str::FromStr;

grammar;

pub CobolProgram: CobolProgram<'input> = {
    <i:IdentificationDivision>
    <e:EnvironmentDivision?>
    <d:DataDivision?>
    <p:ProcedureDivision?>
    =>
    CobolProgram {
        identification_division: i,
        environment_division: e,
        data_division: d,
        procedure_division: p,
    }
}

IdentificationDivision: IdentificationDivision<'input> = {
    "identification"
    "division"
    "."
    <id: ProgramID>
    => IdentificationDivision {
        program_id: id,
    }
}

ProgramID: &'input str = {
    "program-id" "."
    <Identifier>
    "."
    => <>
}

EnvironmentDivision: EnvironmentDivision<'input> = {
    "environment" "division" "." => EnvironmentDivision {
        dummy: "dummy"
    },
}

DataDivision: DataDivision<'input> = {
    "data" "division" "."
    <w:WorkingStorageSection?> => DataDivision {
        working_storage_section: w,
    }
}

WorkingStorageSection: WorkingStorageSection<'input> = {
    "working-storage" "section" "."
    <data_descriptions: DataDescription*> => WorkingStorageSection {
        data_descriptions: <>
    }
}

DataDescription: DataDescription<'input> = {
    <level_number:r"[0-9][0-9]">
    <entry_name:Identifier>
    <descriptionClauses:DataDescriptionClause*>
    "." =>
    DataDescription{
        level_number: i32::from_str(level_number).unwrap() as u8,
        entry_name: entry_name,
        descriptionClauses: descriptionClauses,
    }
}

DataDescriptionClause: DataDescriptionClause<'input> = {
    "pic" <"[xX0-9\\(\\)]"> => DataDescriptionClause::Picture(<>),
    "value" <r#""[^"]""#> => DataDescriptionClause::Value(<>),
}

ProcedureDivision: ProcedureDivision<'input> = {
    "procedure" "division" "." => ProcedureDivision {
        labelsStatements: Vec::new()
    }
}

Identifier: &'input str = {
    r"[a-zA-Z_][a-zA-Z_-]*" => <>
}