use crate::data::ast::*;
use std::str::FromStr;

grammar;

pub CobolProgram: CobolProgram<'input> = {
    <i:IdentificationDivision>
    <e:EnvironmentDivision?>
    <d:DataDivision?>
    <p:ProcedureDivision?>
    =>
    CobolProgram {
        identification_division: i,
        environment_division: e,
        data_division: d,
        procedure_division: p,
    }
}

IdentificationDivision: IdentificationDivision<'input> = {
    IDENTIFICATION
    DIVISION
    DOT
    <id: ProgramID>
    => IdentificationDivision {
        program_id: id,
    }
}

ProgramID: &'input str = {
    PROGRAM_ID DOT
    <Identifier>
    DOT
    => <>
}

EnvironmentDivision: EnvironmentDivision<'input> = {
    ENVIRONMENT DIVISION DOT => EnvironmentDivision {
        dummy: "dummy"
    },
}

DataDivision: DataDivision<'input> = {
    DATA DIVISION DOT
    <w:WorkingStorageSection?> => DataDivision {
        working_storage_section: w,
    }
}

WorkingStorageSection: WorkingStorageSection<'input> = {
    WORKING_STORAGE SECTION DOT
    <data_descriptions: DataDescription*> => WorkingStorageSection {
        data_descriptions: <>.into()
    }
}

DataDescription: DataDescription<'input> = {
    <level_number:LevelNumber>
    <entry_name:Identifier>
    <description_clauses:DataDescriptionClause*>
    DOT =>
    DataDescription {
        level_number: u8::from_str(level_number).unwrap() as u8,
        entry_name: entry_name,
        description_clauses: description_clauses,
    }
}

DataDescriptionClause: DataDescriptionClause = {
    PIC <PicString> => DataDescriptionClause::Picture(<>.to_string()),
    VALUE <StrLiteral> => DataDescriptionClause::Value(<>.to_string()),
}

ProcedureDivision: ProcedureDivision<'input> = {
    PROCEDURE DIVISION DOT
    <LabelStatement*> => ProcedureDivision {
        labels_statements: <>
    }
}

LabelStatement: LabelStatement<'input> = {
    <Identifier> SECTION DOT => LabelStatement::Section(<>),
    <Identifier> DOT => LabelStatement::Label(<>),
    <Statement> DOT => LabelStatement::Statement(<>),
}

Statement: Statement<'input> = {
    <MoveStatement> => Statement::Move(<>),
    <DisplayStatement> => Statement::Display(<>),
}

MoveStatement: MoveStatement<'input> = {
    MOVE Corresponding? <srcs:Identifier+> TO <dsts:Identifier+> =>
    MoveStatement {
        srcs: srcs,
        dsts: dsts,
    }
}

Corresponding: () = {
    CORRESPONDING,
    CORR,
}

DisplayStatement: DisplayStatement<'input> = {
    DISPLAY <Identifier+> =>
    DisplayStatement {
        args: <>
    }
}

//Identifier: &'input str = {
//    r"[a-zA-Z_][0-9a-zA-Z_-]*" => <>
//}

match {
    r"[iI][dD][eE][nN][tT][iI][fF][iI][cC][aA][tT][iI][oO][nN]" => IDENTIFICATION,
    r"[dD][iI][vV][iI][sS][iI][oO][nN]" => DIVISION,
    r"[pP][rR][oO][gG][rR][aA][mM]-[iI][dD]" => PROGRAM_ID,
    r"[dD][iI][sS][pP][lL][aA][yY]" => DISPLAY,
    r"\." => DOT,
    r"[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]" => ENVIRONMENT,
    r"[dD][aA][tT][aA]" => DATA,
    r"[wW][oO][rR][kK][iI][nN][gG]-[sS][tT][oO][rR][aA][gG][eE]" => WORKING_STORAGE,
    r"[sS][eE][cC][tT][iI][oO][nN]" => SECTION,
    r"[pP][iI][cC]" => PIC,
    r"[cC][oO][rR][rR][eE][sS][pP][oO][nN][dD][iI][nN][gG]" => CORRESPONDING,
    r"[cC][oO][rR][rR]" => CORR,
    r"[mM][oO][vV][eE]" => MOVE,
    r"[tT][oO]" => TO,
    r"[pP][rR][oO][cC][eE][dD][uU][rR][eE]" => PROCEDURE,
    r"[vV][aA][lL][uU][eE]" => VALUE,
    r"[0-9][0-9]" => LevelNumber,
    r#""[^"]+""# => StrLiteral,
}
else {r#"[xX9]+"# => PicString}
else {r"[a-zA-Z_][0-9a-zA-Z_-]*" => Identifier}